"""
Django settings for canguinaProject project.

Generated by 'django-admin startproject' using Django 5.1.2.
"""

from pathlib import Path
import os
from decouple import config
import logging
logger = logging.getLogger(__name__)
from django.core.cache import cache
from canguinaProject.utils import testar_redis_em_debug
import dj_database_url

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "canguinaProject.settings")

# Diret√≥rio base do projeto
BASE_DIR = Path(__file__).resolve().parent.parent

# Chave secreta da aplica√ß√£o (leitura segura do .env)
SECRET_KEY = config('SECRET_KEY', default='django-insecure-placeholder')

# Modo debug (nunca ative em produ√ß√£o)
DEBUG = config('DEBUG', default=False, cast=bool)

# Hosts permitidos (em produ√ß√£o use dom√≠nios reais)
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '0.0.0.0',  # Necess√°rio para Docker rodando localmente
    'canguinhaal.com.br',
    'www.canguinhaal.com.br',
    'web-production-6a008.up.railway.app',
    '.railway.app',
]

CSRF_TRUSTED_ORIGINS = [
    "https://www.canguinhaal.com.br",
    "https://canguinhaal.com.br",  # Adicione sem o www tamb√©m
    "https://web-production-6a008.up.railway.app"  # (opcional)
]

if DEBUG:
    testar_redis_em_debug()


# Impede Django de adicionar automaticamente uma barra ao final das URLs
APPEND_SLASH = True

# Middleware da aplica√ß√£o
MIDDLEWARE = [
    # Seguran√ßa e performance
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Serve arquivos est√°ticos com cache eficiente

    # Sess√£o e autentica√ß√£o
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',

    # Prote√ß√£o contra clickjacking
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# M√≥dulo raiz de URLs
ROOT_URLCONF = 'canguinaProject.urls'

# Configura√ß√µes de templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # Diret√≥rio de templates fora das apps
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'debug': DEBUG,  # Ativa detalhes de erro nos templates se DEBUG=True
        },
    },
]

# Defini√ß√£o do entry point WSGI
WSGI_APPLICATION = 'canguinaProject.wsgi.application'

# # Banco de dados: aten√ß√£o ao uso de SQLite em produ√ß√£o!
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
DATABASES = {
    'default': dj_database_url.config(conn_max_age=600)
}

# REDIS_URL: pode ser ajustado via .env ou fallback local
REDIS_URL = config('REDIS_URL', default='redis://127.0.0.1:6379/1')

# Valida√ß√£o defensiva para evitar erro de parsing
if not REDIS_URL.startswith(('redis://', 'rediss://', 'unix://')):
    raise ValueError(f"‚ùå REDIS_URL inv√°lido: {REDIS_URL}")


# Logger dedicado para Redis
redis_logger = logging.getLogger("redis")

# Log do ambiente e Redis configurado
logger.warning(
    f"üõ†Ô∏è Ambiente: {'PRODU√á√ÉO' if not DEBUG else 'DESENVOLVIMENTO'} | Redis em uso: {REDIS_URL}"
)

# Cache unificado com Redis (inclui controle de conex√µes e serializa√ß√£o segura)
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f"{REDIS_URL}/1",
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',

            # Serializa√ß√£o: JSON em produ√ß√£o, Pickle apenas em desenvolvimento
            'SERIALIZER': (
                'django_redis.serializers.pickle.PickleSerializer' if DEBUG
                else 'django_redis.serializers.json.JSONSerializer'
            ),

            # IGNORE_EXCEPTIONS deve ser True apenas no ambiente de desenvolvimento
            'IGNORE_EXCEPTIONS': DEBUG,

            # Pool de conex√µes Redis
            'CONNECTION_POOL_KWARGS': {
                'max_connections': 100,        # Ajuste conforme carga estimada
                'socket_timeout': 120           # Timeout de leitura da resposta em segundos
            },

            # (Opcional) Compress√£o de valores cacheados (√∫til para grandes blobs)
            'COMPRESSOR': 'django_redis.compressors.zlib.ZlibCompressor',
        }
    }
}


# Sess√£o via Redis (mais r√°pido e escal√°vel que DB ou arquivos)
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'


# Valida√ß√µes de senha (padr√µes de seguran√ßa)
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internacionaliza√ß√£o e fuso hor√°rio
LANGUAGE_CODE = 'pt-BR'
TIME_ZONE = 'America/Sao_Paulo'
USE_I18N = True
USE_TZ = True

# Seguran√ßa: for√ßar HTTPS em produ√ß√£o
SECURE_SSL_REDIRECT = not DEBUG
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
# Produ√ß√£o segura
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG
SECURE_HSTS_SECONDS = 31536000  # 1 ano
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = 'DENY'

# Arquivos est√°ticos
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / "ecanguinha/static"]
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Arquivos de m√≠dia (uploads, imagens, etc.)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Campo padr√£o de auto-incremento
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Confirma√ß√£o de Redis configurado
logger.info(f"üîß Cache Redis configurado com: {REDIS_URL}")

# Aplica√ß√µes instaladas
INSTALLED_APPS = [
    # Django apps essenciais
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Whitenoise antes do staticfiles para n√£o conflitar com o runserver
    'whitenoise.runserver_nostatic',

    # Sua app principal
    'ecanguinha.apps.EcanguinhaConfig',
]

# Acrescenta extens√µes √∫teis apenas em ambiente de desenvolvimento
if DEBUG:
    INSTALLED_APPS += ['django_extensions']



# ========================
# üéØ CELERY CONFIG
# ========================
# Define a URL base do Redis, removendo qualquer n√∫mero de banco de dados no final.
# Isso garante que tanto o Broker quanto o Backend usem a mesma conex√£o raiz.
REDIS_URL_BASE = config('REDIS_URL', 'redis://127.0.0.1:6379').rsplit('/', 1)[0]

# Unifica o Broker e o Backend de Resultados no mesmo banco de dados (DB 0)
# para garantir comunica√ß√£o consistente.
CELERY_BROKER_URL = f"{REDIS_URL_BASE}/0"
CELERY_RESULT_BACKEND = f"{REDIS_URL_BASE}/0"

# --- Restante da configura√ß√£o do Celery (sem altera√ß√µes) ---
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutos

# Valida√ß√£o defensiva para garantir que a URL final √© v√°lida
if not CELERY_BROKER_URL.startswith(('redis://', 'rediss://')):
    raise ValueError(f"‚ùå CELERY_BROKER_URL inv√°lido: {CELERY_BROKER_URL}")

if not CELERY_RESULT_BACKEND.startswith(('redis://', 'rediss://')):
    raise ValueError(f"‚ùå CELERY_RESULT_BACKEND inv√°lido: {CELERY_RESULT_BACKEND}")

# Logs para confirmar as URLs em uso
logger.info(f"üöÄ Celery Broker: {CELERY_BROKER_URL}")
logger.info(f"üóÑÔ∏è Celery Backend: {CELERY_RESULT_BACKEND}")



LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },

    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',
    },

    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'urllib3': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'requests': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'redis': {
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'ERROR',
            'propagate': False,
        },
    }
}
